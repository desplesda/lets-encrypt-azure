resources:
- repo: self
  clean: true
trigger:
  batch: true
  branches:
    include:
    - master
schedules:
- cron: "0 17 * * Fri"
  always: true
  displayName: Weekly build
  branches:
    include:
    - master
variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # if true deploys an integration test resourcegroup that can be used to test cert renewal on real domains
  # configure & upload integrationtests.json to run periodic renewal and have int test function verify SSL certs
  # use azure alerts on the function (exception count > 0) to verify
  IntegrationTestsEnabled: false
  
stages:
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: 'windows-latest'
    variables:
      BuildConfiguration: 'release'
    steps:
    - checkout: self

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/LetsEncrypt.Func.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: false

    - task: PublishPipelineArtifact@0
      displayName: 'Publish build Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifactName: function

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Artifact: Infrastructure Scripts'
      inputs:
        targetPath: deploy
        artifactName: deploy

- stage: release
  jobs:
  - job: deploy
    pool:
      vmImage: 'windows-latest'
    variables:
    - group: 'Deployment Credentials'
    - name: ResourceGroupName
      value: 'yarnspinner'

    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: deploy
        targetPath: '$(System.ArtifactsDirectory)'

    - task: AzurePowerShell@4
      displayName: 'Deploy'
      inputs:
        azureSubscription: "Yarn Spinner Let's Encrypt"
        ScriptPath: '$(System.ArtifactsDirectory)/Deploy.ps1'
        ScriptArguments: '-ResourceGroupName $(ResourceGroupName)'
        azurePowerShellVersion: LatestVersion

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: function
        targetPath: '$(System.ArtifactsDirectory)'

    - task: AzureFunctionApp@1
      displayName: 'Deploy Azure Function App'
      inputs:
        azureSubscription: "Yarn Spinner Let's Encrypt"
        appType: functionApp
        appName: '$(ResourceGroupName)'
        package: '$(System.ArtifactsDirectory)/LetsEncrypt.Func'
        deploymentMethod: runFromPackage

  - job: integration
    condition: and(succeeded(), eq(variables['IntegrationTestsEnabled'], 'true'))
    pool:
      vmImage: 'windows-latest'
    variables:
    - group: 'Deployment Credentials'
    - name: ResourceGroupName
      value: 'yarnspinner'

    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: deploy
        targetPath: '$(System.ArtifactsDirectory)'

    - task: AzurePowerShell@4
      displayName: 'Deploy'
      inputs:
        azureSubscription: "Yarn Spinner Let's Encrypt"
        ScriptPath: '$(System.ArtifactsDirectory)/Deploy.ps1'
        ScriptArguments: '-ResourceGroupName $(ResourceGroupName) -File integration.json'
        azurePowerShellVersion: LatestVersion
